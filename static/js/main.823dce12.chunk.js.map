{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortBy","goodsFromServer","App","useState","None","sortBy","setSortBy","isReversed","setIsReversed","displayedGoods","goods","options","sortedGoods","sort","good1","good2","Length","length","Alphabetically","localeCompare","reverse","sortGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,gBAAAA,E,gCAAAA,E,SAAAA,M,KAoCE,IAAME,EAAgB,WAC3B,MAA4BC,mBAAiBH,EAAOI,MAApD,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EA7BR,SAAmBC,EAAiBC,GAClC,IAAMC,EAAW,YAAOF,GAqBxB,OAnBIC,EAAQN,QACVO,EAAYC,MAAK,SAACC,EAAOC,GACvB,OAAQJ,EAAQN,QACd,KAAKL,EAAOgB,OACV,OAAOF,EAAMG,OAASF,EAAME,OAE9B,KAAKjB,EAAOkB,eACV,OAAOJ,EAAMK,cAAcJ,GAE7B,QACE,OAAO,MAKXJ,EAAQJ,YACVK,EAAYQ,UAGPR,EAOgBS,CAAUpB,EAAiB,CAAEI,SAAQE,eAO5D,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMjB,EAAUN,EAAOkB,iBAChCM,KAAK,SACLF,UAAWG,IACT,iBACA,CAAE,WAAYpB,IAAWL,EAAOkB,iBALpC,iCAWA,wBACEK,QAAS,kBAAMjB,EAAUN,EAAOgB,SAChCQ,KAAK,SACLF,UAAWG,IACT,oBACA,CAAE,WAAYpB,IAAWL,EAAOgB,SALpC,4BAWA,wBACEO,QAAS,kBAAMf,GAAeD,IAC9BiB,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CAAE,YAAalB,IAHpD,sBAQEF,IAAWL,EAAOI,MAAQG,IAC1B,wBACEgB,QAxCW,WACnBf,GAAc,GACdF,EAAUN,EAAOI,OAuCToB,KAAK,SACLF,UAAU,4BAHZ,sBAUJ,6BACGb,EAAeiB,KAAI,SAAAC,GAAI,OACtB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YC7GjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.823dce12.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortBy {\n  Length = 'length',\n  Alphabetically = 'alphabetically',\n  None = '',\n}\n\ninterface SortingOptions {\n  sortBy: SortBy;\n  isReversed: boolean;\n}\n\nfunction sortGoods(goods: string[], options: SortingOptions): string[] {\n  const sortedGoods = [...goods];\n\n  if (options.sortBy) {\n    sortedGoods.sort((good1, good2) => {\n      switch (options.sortBy) {\n        case SortBy.Length:\n          return good1.length - good2.length;\n\n        case SortBy.Alphabetically:\n          return good1.localeCompare(good2);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (options.isReversed) {\n    sortedGoods.reverse();\n  }\n\n  return sortedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortBy, setSortBy] = useState<SortBy>(SortBy.None);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const displayedGoods = sortGoods(goodsFromServer, { sortBy, isReversed });\n\n  const resetSorting = () => {\n    setIsReversed(false);\n    setSortBy(SortBy.None);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortBy(SortBy.Alphabetically)}\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            { 'is-light': sortBy !== SortBy.Alphabetically }\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortBy(SortBy.Length)}\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            { 'is-light': sortBy !== SortBy.Length }\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setIsReversed(!isReversed)}\n          type=\"button\"\n          className={cn('button is-warning', { 'is-light': !isReversed })}\n        >\n          Reverse\n        </button>\n\n        {(sortBy !== SortBy.None || isReversed) && (\n          <button\n            onClick={resetSorting}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {displayedGoods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}